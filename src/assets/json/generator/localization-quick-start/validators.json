{"rightSidebarLinks":[{"id":"localization-quick-start","title":"localization-quick-start","subLink":null},{"id":"packageinstallation","title":"Package Installation","subLink":[]},{"id":"addingjsonfileofglobalandcomponentcontent","title":"Adding Json file of global and component content","subLink":[{"title":"Adding Rxweb module","id":"addingrxwebmodule","thirdLevelLink":[]},{"title":"Adding base multilingual, global and component data","id":"addingbasemultilingual,globalandcomponentdata","thirdLevelLink":[]}]},{"id":"basemultilingualcontentresolver","title":"BaseMultilingualContentResolver","subLink":[{"title":"Configuring bootstrapRxWebFramework","id":"configuringbootstraprxwebframework","thirdLevelLink":[]}]},{"id":"globalmultilingualcontentresolver","title":"GlobalMultilingualContentResolver","subLink":[]},{"id":"componentmultilingualcontentresolver","title":"ComponentMultilingualContentResolver","subLink":[{"title":"configurating it into @routerModule","id":"configuratingitinto@routermodule","thirdLevelLink":[]},{"title":"adding @multilingual component name into component ts","id":"adding@multilingualcomponentnameintocomponentts","thirdLevelLink":[]}]}],"title":"Localization","description":"","validatorType":"validators","validationTypeTitle":"Validators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/localization/localization-quick-start.md","category":"localization","subCategory":"","linkTitle":"localization-quick-start","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >In an enterprise application, working in many different regions require managing different locales and timezones. The data based upon the language code entered during the login of the application. Here is the step by step process to achieve the data based upon different languages.</p>\r\n<div class='row page-section' id= 'packageinstallation'>\r\n<div class='col-lg-12'>\r\n<h2>Package Installation<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#packageinstallation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The first step is to install the localization package to use localization for targeting the worldwide audiencies. </p>\r\n<div component=\"app-code\" key=\"localization-installation-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'addingjsonfileofglobalandcomponentcontent'>\r\n<div class='col-lg-12'>\r\n<h2>Adding Json file of global and component content<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#addingjsonfileofglobalandcomponentcontent'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The multilingual data which is entered into the database creates a json file into the localization folder of assets folder. For example : If it is global data it will create <span class='highlighted'>global-en.json</span> for english content and <span class='highlighted'>&ltcomponent_name&gt-en.json</span> for component specific data.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'addingrxwebmodule'>\r\n<div class='col-lg-12'>\r\n<h2>Adding Rxweb module<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#addingrxwebmodule'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Rxweb module has the necessary imports and declarations such as <span class='highlighted'>@routerModule</span> for the necessary configurations related to authentication and authorization resolver etc.</p>\r\n<div component=\"app-code\" key=\"localization-complete-component\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'addingbasemultilingual,globalandcomponentdata'>\r\n<div class='col-lg-12'>\r\n<h2>Adding base multilingual, global and component data<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#addingbasemultilingual,globalandcomponentdata'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The BaseMultilingualContentResolver resolves the data of the global multilingual data and component multilingual data resolves component specific data. </p>\r\n</div></div>\r\n<div class='row page-section' id= 'basemultilingualcontentresolver'>\r\n<div class='col-lg-12'>\r\n<h2>BaseMultilingualContentResolver<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#basemultilingualcontentresolver'><i class='fa fa-link'></i></a></h2>\r\n\r\n<div component=\"app-code\" key=\"localization-base-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'configuringbootstraprxwebframework'>\r\n<div class='col-lg-12'>\r\n<h2>Configuring bootstrapRxWebFramework<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#configuringbootstraprxwebframework'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >bootstrapRxwebFramework is configured in the main.ts file of the application to explicitily call the baseMultilingual to resolve the global multilingual data. It is configured as below: </p>\r\n<div component=\"app-code\" key=\"localization-bootstrap-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'globalmultilingualcontentresolver'>\r\n<div class='col-lg-12'>\r\n<h2>GlobalMultilingualContentResolver<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#globalmultilingualcontentresolver'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Resolves global multilingual Data based upon the language code from the multilingual data from the json which is generated in the localization folder of the project based upon the multilingual data entered in the database.</p>\r\n<div component=\"app-code\" key=\"localization-global-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'componentmultilingualcontentresolver'>\r\n<div class='col-lg-12'>\r\n<h2>ComponentMultilingualContentResolver<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#componentmultilingualcontentresolver'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Where there comes a scenario where you need to add component specific multilingual data for storing a value of placeholder, text or label. It is resolved using ComponentMultilingualContentResolver which is as below: </p>\r\n<div component=\"app-code\" key=\"localization-componentspecific-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'configuratingitinto@routermodule'>\r\n<div class='col-lg-12'>\r\n<h2>configurating it into @routerModule<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#configuratingitinto@routermodule'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >As mentioned in the <a class=\"redirect-link\" href=\"/rxweb-router/router/router-module\">routerModule</a> the configuration is to be set in the routerModule as below</p>\r\n</div></div>\r\n<div class='row page-section' id= 'adding@multilingualcomponentnameintocomponentts'>\r\n<div class='col-lg-12'>\r\n<h2>adding @multilingual component name into component ts<a title='Link to this heading' class='link-header' href='/localization/localization-quick-start/validators#adding@multilingualcomponentnameintocomponentts'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The final step is to be mention the component name in <span class='highlighted'>@multilingual</span> decorator to fetch the component specific multilingual data.</p>\r\n<div component=\"app-code\" key=\"localization-multilingual-component\"></div> \r\n</div></div>\r\n"}