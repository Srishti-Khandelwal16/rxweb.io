{"rightSidebarLinks":[{"id":"ip","title":"ip (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicipvalidation","title":"Basic Ip Validation","subLink":[]},{"id":"ipconfig","title":"IpConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"isCidr","id":"iscidr","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"version","id":"version","thirdLevelLink":[]}]},{"id":"completeipexample","title":"Complete Ip Example","subLink":[]},{"id":"dynamicipexample","title":"Dynamic Ip Example","subLink":[]},{"id":"githubissues","title":"ip Github Issues","subLink":null}],"title":"ip","description":"ip validation validators is used to validate the ip address of the device.","validatorType":"validators","validationTypeTitle":"Validators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/ip.md","category":"form-validations","subCategory":"String","linkTitle":"ip","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-ip-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"ip-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"ip-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-ip-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"ip-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"ip-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"ip-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>ip</p></div> <div class=\"title-bar\"><p>ip validation validator is used to validate the ip address of the device.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a User form, which contains fields like ipType,ipV4, ipV6, anyIPType, ipV4Cidr, ipV6Cidr, ipV6Conditional, ipV4Message and you want the user to enter only ip address. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n\t<li>Allow only ip addresses in ipV4 field based on version.</li>\r\n    <li>Allow only ip addresses in ipV6 field based on version.</li>\r\n    <li>Allow only ip addresses in ipV4Cidr field based on CIDR.</li>\r\n    <li>Allow only ip addresses in ipV6Cidr field based on CIDR.</li>\r\n\t<li>Apply ip validation based on matched condition in the form, like if the ipType is 'V6' then the ipV6Conditional value should be in ip address format only.</li>\r\n\t\t<li>Apply ip validation based on matched condition in the form, like if the ipType is 'V4' then the ipV4Conditional value should be in ip address format only.</li>\r\n\t<li>Adding custom message in ipV4Message field.</li>\r\n  <li>Adding custom message in ipV6MessageKey field based on MessageKey.</li>\r\n\t<data-scope scope=\"['decorator','validator']\">\r\n\t\t<li>Apply ip validation dynamically based on server rules. </li>\r\n\t</data-scope>\r\n</ol>\r\n</div></div>\r\n<div class='row page-section' id= 'basicipvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic Ip Validation<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#basicipvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"ip-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"ip-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-ip-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'ipconfig'>\r\n<div class='col-lg-12'>\r\n<h2>IpConfig<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#ipconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.ip()</span> validator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Ip validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#isCidr\")' title=\"isCidr\">isCidr</a></td><td>isCidr option of ip validation is used to check whether the ip address is in CIDR notation or not.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#version\")' title=\"version\">version</a></td><td>Version option is used to define the version of ip address.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >Ip validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</p>\r\n<blockquote class='showHideElement' ><p>This won't work if you return without expression or fixed boolean value true or false; like : <span class='highlighted'>conditionalExpression: (x) =x.toggle</span></p></blockquote>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"ip-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"ip-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-ip-conditionalExpression\" title=\"ip validator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'iscidr'>\r\n<div class='col-lg-12'>\r\n<h2>isCidr<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#iscidr'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>boolean</span></p>\r\n<p class='showHideElement' >isCidr option of ip validation is used to check whether the ip address is in CIDR notation or not.</p>\r\n<div component=\"app-code\" key=\"ip-isCidrExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-ip-isCidr\" title=\"ip validator with isCidr\" key=\"isCidr\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"ip-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-ip-message\" title=\"ip validator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"ip-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-ip-messageKey\" title=\"ip validator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'version'>\r\n<div class='col-lg-12'>\r\n<h2>version<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#version'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>IpVersion</span></p>\r\n<p class='showHideElement' >Version option is used to define the version of ip address.</p>\r\n<div component=\"app-code\" key=\"ip-versionExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-ip-version\" title=\"ip validator with version\" key=\"version\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeipexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete Ip Example<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#completeipexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete Ip example which includes all the IpConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicipexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic Ip Example<a title='Link to this heading' class='link-header' href='/form-validations/ip/validators#dynamicipexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic ip example is executed on the basis of json passed in the formBuilderConfiguration which comes under <span class='highlighted'>RxFormBuilder</span> of reactive-form-validators. <span class='highlighted'>conditionalExpression</span> with function would not be applied in dynamic ip example. This example will fulfil the requirement of our last point.</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/tabs/ip/validators#githubissues' fragment='githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}