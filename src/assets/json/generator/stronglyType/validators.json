{"rightSidebarLinks":[{"id":"strongly typed reactive form","title":"Strongly Typed Reactive Form","subLink":null},{"id":"example","title":"Example","subLink":[]},{"id":"maintainingformcontrolvalueasperthedefinedtypes","title":"Maintaining formControl value as per the Defined Types","subLink":[]}],"title":"Strongly Typed Reactive Form","description":"","validatorType":"validators","validationTypeTitle":"Validators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/how-to/stronglyType.md","category":"how-to","subCategory":"","linkTitle":"stronglyType","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >While developing complex forms then respective FormControls should be strongly typed with the model.</p>\r\n<p class='showHideElement' >That can be achieved through 'IFormGroup' interface.</p>\r\n<p class='showHideElement' >Let's see how it works.</p>\r\n<div class='row page-section' id= 'example'>\r\n<div class='col-lg-12'>\r\n<h2>Example<a title='Link to this heading' class='link-header' href='/how-to/stronglyType/validators#example'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First, we create a User model and define the property of fullName.</p>\r\n<div component=\"app-code\" key=\"stronglyType-add-model\"></div> \r\n<p class='showHideElement' >Now we create a FormGroup, but our FormGroup object type is IFormGroup<User>. IFormGroup is an interface which is inherited with the FormGroup class so that you can access the privileges of FormGroup as well as additional methods of RxFormGroup.</p>\r\n<div component=\"app-code\" key=\"stronglyType-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"stronglyType-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-stronglyType-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'maintainingformcontrolvalueasperthedefinedtypes'>\r\n<div class='col-lg-12'>\r\n<h2>Maintaining formControl value as per the Defined Types<a title='Link to this heading' class='link-header' href='/how-to/stronglyType/validators#maintainingformcontrolvalueasperthedefinedtypes'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >As properties defined in the model can have different data types according to the field requirement and the form is strongly typed with the model, the formControl value should be according the type mentioned in the model. </p>\r\n<p class='showHideElement' >This can be achieved using sanitizers of <a class=\"redirect-link\" href=\"/rxweb-sanitizers/sanitizers-getting-started\">@rxweb/sanitizers</a>. These sanitizers are used as decorator above the property in the model.</p>\r\n<p class='showHideElement' >In the below scenario i have a strongly typed form in which the <span class='highlighted'>accept</span> property is boolean therefore adding <span class='highlighted'>toBoolean</span> decorator on the property which retrieve the <span class='highlighted'>accept</span> formControl as boolean  </p>\r\n<div component=\"app-code\" key=\"stronglyType-defined-model\"></div> \r\n<div component=\"app-code\" key=\"stronglyType-defined-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"stronglyType-defined-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-stronglyType-defined\"></div>\r\n</div></div>\r\n"}