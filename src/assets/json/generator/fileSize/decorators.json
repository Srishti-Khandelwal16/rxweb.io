{"rightSidebarLinks":[{"id":"filesize","title":"fileSize (Decorator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicfilesizevalidation","title":"Basic fileSize Validation","subLink":[]},{"id":"sizeconfig","title":"SizeConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"maxSize","id":"maxsize","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completefilesizeexample","title":"Complete fileSize Example","subLink":[]},{"id":"dynamicfilesizeexample","title":"Dynamic fileSize Example","subLink":[]},{"id":"githubissues","title":"fileSize Github Issues","subLink":null}],"title":"fileSize","description":"fileSize validation decorators allows user to enter the input which is in the proper fileSize size format.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/fileSize.md","category":"form-validations","subCategory":"","linkTitle":"fileSize","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"fileSize-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-fileSize-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-edit-component\"></div>\r\n<p class='showHideElement' >The below default data which is coming from the server in this example of edit form which is set in the `storage-capacity-data.json` in json format like this:</p>\r\n<div component=\"app-code\" key=\"fileSize-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"fileSize-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-fileSize-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-fileSize-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-complete-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-complete-component\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-fileSize-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"fileSize-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>fileSize</p></div> <div class=\"title-bar\"><p>fileSize validation decorator allows user to enter the input which is in the proper fileSize size format.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a UserInfo form, which contains fields like fileType , profilePhoto, videoFile , audioFile and imageFile, documentFile ,contactFile, profilePicture and you want the user to enter input which is a proper size format. Here depending upon the requirement, these scenarios may arise..</p>\r\n<ol class='showHideElement'>\r\n   <li>Allow profilePhoto which have proper size format.</li>\r\n   <li>Apply validation on documentFile field based on matched condition in the form, like if the fileType is 'Document', then the documentFile must be a size format (Used as a function).</li>\r\n   <li>Apply validation on imageFile field based on matched condition in the form, like if the device is 'SmartPhone', then the imageFile must be a size format (Used as a string datatype).</li>\r\n   <li>Adding custom message on ContactFile field</li>\r\n   <li>Shows the custom message on <span class='highlighted'>Excel File</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n   <data-scope scope=\"['decorator','validator']\">\r\n   <li>Apply fileSize validation dynamically based on server rules.</li>\r\n   </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Let's see how fileSize decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicfilesizevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic fileSize Validation<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#basicfilesizevalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a UserInfo model and define a property of videoFile in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"fileSize-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'sizeconfig'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >SizeConfig<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#sizeconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@fileSize()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>FileSize validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function. For boolean variables, if you want to apply conditionalExpression, you must use <span class='highlighted'>===</span> instead of <span class='highlighted'>==</span>.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#maxSize\")' title=\"maxSize\">maxSize</a></td><td>maxSize property of the SizeConfig is used to set the maximum fileSize size allowed to be entered.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >fileSize validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function. For boolean variables, if you want to apply conditionalExpression, you must use <span class='highlighted'>===</span> instead of <span class='highlighted'>==</span>.</p>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"fileSize-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"fileSize-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-fileSize-conditionalExpression\" title=\"fileSize decorator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'maxsize'>\r\n<div class='col-lg-12'>\r\n<h2>maxSize<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#maxsize'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >maxSize property of the SizeConfig is used to set the maximum fileSize size allowed to be entered.</p>\r\n<div component=\"app-code\" key=\"fileSize-maxSizeExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-fileSize-maxSize\" title=\"fileSize decorator with maxSize\" key=\"maxSize\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"fileSize-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-fileSize-message\" title=\"fileSize decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"fileSize-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-fileSize-messageKey\" title=\"fileSize decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completefilesizeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete fileSize Example<a title='Link to this heading' class='link-header'  href='/form-validations/fileSize/decorators#completefilesizeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete fileSize example which includes all the SizeConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicfilesizeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic fileSize Example<a title='Link to this heading' class='link-header' href='/form-validations/fileSize/decorators#dynamicfilesizeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic FileSize example is executed on the basis of json passed in the formBuilderConfiguration which comes under <span class='highlighted'>RxFormBuilder</span> of reactive-form-validators. <span class='highlighted'>conditionalExpression</span> with function would not be applied in dynamic fileSize example. This example will fulfil the requirement of our last point.</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/form-validations/fileSize/decorators#githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}