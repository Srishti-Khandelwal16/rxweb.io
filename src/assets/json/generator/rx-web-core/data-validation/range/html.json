{"rightSidebarLinks":[{"id":"range","title":"Range","subLink":null},{"id":"range","title":"Range","subLink":[]},{"id":"basicmaxlengthvalidation","title":"Basic Maxlength Validation","subLink":[{"title":"allowMaximumLength","id":"allowmaximumlength","thirdLevelLink":[]},{"title":"ConditionalExpression","id":"conditionalexpression","thirdLevelLink":[]}]},{"id":"dynamicconfigexpressionname","title":"dynamicConfigExpressionName","subLink":[{"title":"MessageKey","id":"messagekey","thirdLevelLink":[]}]}],"title":"Range","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/data-validation/range.md","category":"rxwebcore","subCategory":"data-validation","linkTitle":"range","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'range'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Range</h1>\r\n\r\n<p class='showHideElement' ><span class='highlighted'>Range</span> annotation is used when you want a property value in a specific range. </p>\r\n<p class='showHideElement' >Let's consider a scenario where there is a model class <span class='highlighted'>Candidate.cs</span> which has properties of  CandidateId, CandidateName and Age.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicmaxlengthvalidation'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Basic Maxlength Validation</h1>\r\n\r\n<div class='model-ts'><pre><code>\r\n    [Range(2,10)]\r\n    public string ContactNumber { get; set; }\r\n</code></pre></div>\r\n<table class=\"table table bordered\">\r\n<tr><th>Property</th><th>Description</th><th>Syntax</th></tr>\r\n<tr>\r\n<td>maxLength</td>\r\n<td>Enter value which you want to restrict the limit upto.</td>\r\n<td>[(10)]</td>\r\n</tr>\r\n<tr>\r\n<td>messageKey</td>\r\n<td>You can set the messageKey based on localization with the help of <span class='highlighted'>messageKey</span></td>\r\n<td>[MaxLength(<span class='highlighted'>messageKey</span>: \"maxLengthMessageKey\" )]</td>\r\n</tr>\r\n<tr>\r\n<td>conditionalExpressionName</td>\r\n<td>If you want to apply maxLength validation based on a custom condition, pass that custom validation function's name in <span class='highlighted'>conditionalExpressionName</span> property of MaxLength validation.</td>\r\n<td>[MaxLength(<span class='highlighted'>conditionalExpressinName</span>:nameof(<span class='highlighted'>User.ContactConditionalExpression</span>))]</td>\r\n</tr>\r\n<tr>\r\n<td>dynamicConfigExpressionName</td>\r\n<td>If you want to set any validation property at runtime, then <span class='highlighted'>dynamicConfigExpressionName</span> can be used.</td>\r\n<td>[MaxLength(<span class='highlighted'>dynamicConfigExpressionName</span>:nameof(<span class='highlighted'>AdressDynamicExpression</span>))]</td>\r\n</tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'allowmaximumlength'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>allowMaximumLength</h2>\r\n\r\n<p class='showHideElement' >Type : int</p>\r\n<p class='showHideElement' >The minimum length based upon which the value is limited.</p>\r\n<div class='model-ts'><pre><code>\r\n    [MaxLength(10)]\r\n    public string ContactNumber { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>ConditionalExpression</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' ><span class='highlighted'>MaxLength</span> validation annotation can be applied conditionally based on the custom validation function. You can write your condition by making a custom function in your class and pass that function's name in <span class='highlighted'>nameOf</span> property of <span class='highlighted'>conditionalExpressionName</span>. </p>\r\n<p class='showHideElement' >The custom validation function is made in ExtendedModels folder of Main, In which a partial class of the model will be made.</p>\r\n<p class='showHideElement' >In the ExtendedModel class</p>\r\n<p class='showHideElement' >Candidate.cs :</p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class Candidate {\r\n        public string Email { get; set; }\r\n        public bool ContactConditionalExpression(object parentEntity = null) {\r\n            var t = this;\r\n            if (Email == \"\")\r\n                return false;\r\n            else return true;\r\n        }\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >And in the DbEntities class</p>\r\n<div class='model-ts'><pre><code>\r\n  [MaxLength((10),conditionalExpressionName:nameof(Candidate.ContactConditionalExpression))]\r\n  public string ContactNumber { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicconfigexpressionname'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>dynamicConfigExpressionName</h1>\r\n\r\n<p class='showHideElement' >If you want to set any validation property at runtime, then <span class='highlighted'>dynamicConfigExpressionName</span> can be used. </p>\r\n<p class='showHideElement' >For example, if you want to set messageKey of any model property at run time:</p>\r\n<p class='showHideElement' >Here is the dynamic expression function.</p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class Candidate {\r\n        public Dictionary&ltstring, object&gt AdressDynamicExpression(object parentEntity = null) {\r\n            return new Dictionary&ltstring, object&gt()\r\n            {\r\n                { \"CustomMessageKey\",\"CustomMaxLengthKey\" }\r\n            };\r\n        }\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >In the DbEntities table :</p>\r\n<div class='model-ts'><pre><code>\r\n    [MaxLength( <span class='highlighted'>dynamicConfigExpressionName</span>: nameof(<span class='highlighted'>AddressDynamicExpression</span>))]\r\n    public string Address { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>MessageKey</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want to show a custom validation message based upon the entity. MessageKey property is used. Its value is stored in the database in the form of <span class='highlighted'>LanguageContentKey</span> in LanguageContentKeys table and it's EN value is stored in LanguageContents table</p>\r\n<strong>LanguageContentKeys Table</strong>\r\n<table class=\"table table-bordered\">\r\n<tr><th>LanguageContentKeyId</th><th>KeyName</th><th>IsComponent</th></tr>\r\n<tr><td>1</td><td>MaxLengthMessageKey</td><td>0</td>\r\n</table>\r\n<strong>LanguageContents Table</strong>\r\n<table class=\"table table-bordered\">\r\n<tr><th>LanguageContentId</th><th>LanguageContentKeyId</th><th>ContentType</th><th>En</th><th>Fr</th></tr>\r\n<tr><td>1</td><td>1</td><td>g</td><td>This candidate data exceeds the maxLength</td><td>NULL</td></tr>\r\n</table>\r\n<p class='showHideElement' >In the DbEntity class : </p>\r\n<div class='model-ts'><pre><code>\r\n    [MaxLength((10),messageKey:\"MaxLengthMessageKey\")]\r\n     public string Address { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n"}