{"rightSidebarLinks":[{"id":"unique","title":"Unique","subLink":null},{"id":"unique","title":"Unique","subLink":[]},{"id":"basicuniquevalidation","title":"Basic Unique Validation","subLink":[{"title":"ConditionalExpressionName","id":"conditionalexpressionname","thirdLevelLink":[]},{"title":"DynamicConfigExpressionName","id":"dynamicconfigexpressionname","thirdLevelLink":[]},{"title":"MessageKey","id":"messagekey","thirdLevelLink":[]}]}],"title":"Unique","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/data-validation/unique.md","category":"rxwebcore","subCategory":"data-validation","linkTitle":"unique","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'unique'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Unique</h1>\r\n\r\n<p class='showHideElement' ><span class='highlighted'>Unique</span> validation annotation lets you enter unique value in an array based model property. </p>\r\n<p class='showHideElement' >let's consider a scenario where data insertion operation is to be done on candidate entity. The candidate contains various fields like candidateName, EmailId, country etc.. The EmailId field should be entered in such a way that if the emailId already exists in the database the insertion should not take place. This is done using <span class='highlighted'>[Unique]</span> annotation.  </p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicuniquevalidation'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Basic Unique Validation</h1>\r\n\r\n<p class='showHideElement' >For performing a basic unique validation on the candidate entity.</p>\r\n<strong>Step 1 :</strong>\r\n<p class='showHideElement' >Create an extended model folder in the main folder and into that create a partial class of Candidate </p>\r\n<div class='model-ts'><pre><code>\r\n    [Unique(connection: typeof(IMainDatabaseFacade), uniqueQueryMethod:nameof(Candidate.UniqueEmailId))]\r\n</code></pre></div>\r\n<p class='showHideElement' >The Unique validation function will be made in the main folder of the ExtendedModels folder. </p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class Candidate {\r\n        public bool UniqueEmailId(object Email = null) {\r\n            if(!Candidates.any(x=>x.EmailId == Email))\r\n            return false\r\n        }\r\n    }\r\n</code></pre></div>\r\n<strong>Step 2:</strong>\r\n<p class='showHideElement' >Add annotation validation above the model class</p>\r\n<table class=\"table table bordered\">\r\n<tr><th>Property</th><th>Description</th><th>Syntax</th></tr>\r\n<tr>\r\n<td>connection</td>\r\n<td>The Type of connection used.</td>\r\n<td>typeof(IMainDatabaseFacade)</td>\r\n</tr>\r\n<tr>\r\n<td>uniqueQueryMethod</td>\r\n<td>the query method used for applying unique validation.</td>\r\n<td>uniqueQueryMethod:nameof(Candidate.UniqueEmailId)</td>\r\n</tr>\r\n<td>conditionalExpressionName</td>\r\n<td>If you want to apply unique validation based on a custom condition, pass that custom validation function's name in <span class='highlighted'>conditionalExpressionName</span> property of Unique validation. </td>\r\n<td>[Unique(<span class='highlighted'>typeof</span>(IMainDatabaseFacade),<span class='highlighted'>conditionalExpressionName</span>:nameof(<span class='highlighted'>Unique.CandidateEmailConditionalExpression</span>))]</td>\r\n</tr>\r\n<tr>\r\n<td>dynamicConfigExpressionName</td>\r\n<td>If you want to set any validation property at runtime, then <span class='highlighted'>dynamicConfigExpressionName</span> can be used.</td>\r\n<td> [Unique(<span class='highlighted'>typeof</span>(IMainDatabaseFacade),<span class='highlighted'>dynamicConfigExpressionName</span>:nameof(<span class='highlighted'>CandidateEmailDynamicExpression</span>))]</td>\r\n</tr>\r\n<tr>\r\n<td>messageKey</td>\r\n<td>You can set the messageKey based on localization with the help of <span class='highlighted'>messageKey</span></td>\r\n<td>[Unique(typeof(IMainDatabaseFacade),<span class='highlighted'>messageKey</span>:\"UniqueMessageKey\")]</td>\r\n</tr>\r\n<tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpressionname'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>ConditionalExpressionName</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want the validation to be fired based upon some custom validation function. It is passed in the <span class='highlighted'>ConditionalExpressionName</span> property.</p>\r\n<p class='showHideElement' >The custom validation function is made in ExtendedModels folder of Main, In which a partial class of the model will be made.</p>\r\n<p class='showHideElement' >In the ExtendedModel class</p>\r\n<p class='showHideElement' >Candidate.cs :</p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class Candidate {\r\n        public bool UniqueEmailId(object Email = null) {\r\n            if(!Candidates.any(x=>x.EmailId == Email))\r\n            return false\r\n        }\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >And in the DbEntities class</p>\r\n<p class='showHideElement' >Person.cs</p>\r\n<div class='model-ts'><pre><code>\r\n  [Unique(conditionalExpressionName:nameof(Person.PersonConditionalExpression))]\r\n  public string PersonName { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicconfigexpressionname'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>DynamicConfigExpressionName</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want to set validation property of validation at runtime(on the fly) validation, <span class='highlighted'>DynamicConfigExpressionName</span> is set in which the custom function of dynamicExpressionName is passed.</p>\r\n<p class='showHideElement' >In the ExtendedModel class</p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class CandidateEmail {\r\n        public Dictionary&ltstring, object&gt CandidateEmailDynamicExpression(object parentEntity = null) {\r\n            return new Dictionary&ltstring, object&gt()\r\n            {\r\n                { \"CustomMessageKey\",\"CustomUniqueKey\" }\r\n            };\r\n        }\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >In the DbEntities class</p>\r\n<div class='model-ts'><pre><code>\r\n    [Unique(dynamicConfigExpressionName: nameof(CandidateEmailDynamicExpression))]\r\n    public string EmailId { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>MessageKey</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want to show a custom validation message based upon the entity. MessageKey property is used. Its value is stored in the database in the form of <span class='highlighted'>LanguageContentKey</span> in LanguageContentKeys table and it's EN value is stored in LanguageContents table</p>\r\n<strong>LanguageContentKeys Table</strong>\r\n<table class=\"table table-bordered\">\r\n<tr><th>LanguageContentKeyId</th><th>KeyName</th><th>IsComponent</th></tr>\r\n<tr><td>1</td><td>UniqueMessageKey</td><td>0</td>\r\n</table>\r\n<strong>LanguageContents Table</strong>\r\n<table class=\"table table-bordered\">\r\n<tr><th>LanguageContentId</th><th>LanguageContentKeyId</th><th>ContentType</th><th>En</th><th>Fr</th></tr>\r\n<tr><td>1</td><td>1</td><td>g</td><td>This candidate data should be unique</td><td>NULL</td></tr>\r\n</table>\r\n<p class='showHideElement' >In the DbEntity class : </p>\r\n<div class='model-ts'><pre><code>\r\n    [Unique(messageKey:\"UniqueMessageKey\")]\r\n     public string EmailId { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n"}