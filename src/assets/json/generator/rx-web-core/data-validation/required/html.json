{"rightSidebarLinks":[{"id":"required","title":"Required","subLink":null},{"id":"required","title":"Required","subLink":[]},{"id":"basicrequiredvalidation","title":"Basic Required Validation","subLink":[{"title":"allowWhiteSpace","id":"allowwhitespace","thirdLevelLink":[]},{"title":"ConditionalExpressionName","id":"conditionalexpressionname","thirdLevelLink":[]},{"title":"DynamicConfigExpressionName","id":"dynamicconfigexpressionname","thirdLevelLink":[]},{"title":"MessageKey","id":"messagekey","thirdLevelLink":[]}]}],"title":"Required","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/data-validation/required.md","category":"rxwebcore","subCategory":"data-validation","linkTitle":"required","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'required'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Required</h1>\r\n\r\n<p class='showHideElement' ><span class='highlighted'>Required</span> annotation will be used when you don't want the model property to be null. There are many properties of the validation which can be used based upon the scenario </p>\r\n<p class='showHideElement' >Let's consider a scenario where there is a model class <span class='highlighted'>Candidate.cs</span> which has properties of  CandidateId, CandidateName.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicrequiredvalidation'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Basic Required Validation</h1>\r\n\r\n<div class='model-ts'><pre><code>\r\n[Required]\r\npublic string CandidateName { get; set; }\r\n</code></pre></div>\r\n<p class='showHideElement' >Using required annotation before the property, this is not allow null value to be entered in CandidateName. There are several additional properties of the annotations which can be used to validate the property which are listed below:</p>\r\n<table class=\"table table bordered\">\r\n<tr><th>Property</th><th>Description</th><th>Syntax</th></tr>\r\n<tr>\r\n<td>allowWhiteSpace</td>\r\n<td>You can also allow whitespace in that property, if you want to allow space in the property.</td>\r\n<td>[Required(allowWhiteSpace: true)]</td>\r\n</tr>\r\n<tr>\r\n<td>messageKey</td>\r\n<td>You can set the messageKey based on localization with the help of <span class='highlighted'>messageKey</span></td>\r\n<td>[Required(messageKey: \"requiredMessageKey\" )]</td>\r\n</tr>\r\n<tr>\r\n<td>conditionalExpressionName</td>\r\n<td>If you want to apply required validation based on a custom condition, pass that custom validation function's name in <span class='highlighted'>conditionalExpressionName</span> property of Required validation. </td>\r\n<td>| [Required(conditionalExpressionName:nameof(User.EmailConditionalExpression))] </td>\r\n</tr>\r\n<tr>\r\n<td>dynamicConfigExpressionName</td>\r\n<td>If you want to set any validation property at runtime, then <span class='highlighted'>dynamicConfigExpressionName</span> can be used.</td>\r\n<td> [Required(dynamicConfigExpressionName:nameof(EmailDynamicExpression))] </td>\r\n</tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'allowwhitespace'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>allowWhiteSpace</h2>\r\n\r\n<p class='showHideElement' >Type : boolean</p>\r\n<p class='showHideElement' >allowWhiteSpace property is set to true when you want to allow space in the CandidateName value. It should be set true before the annotation. By default it is set false.  </p>\r\n<div class='model-ts'><pre><code>\r\n[Required(allowWhiteSpace:true)]\r\npublic string CandidateName { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpressionname'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>ConditionalExpressionName</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want the validation to be fired based upon some custom validation function. It is passed in the <span class='highlighted'>ConditionalExpressionName</span> property.</p>\r\n<p class='showHideElement' >The validation function is made in ExtendedModels folder of Main, In which a partial class of the model will be made.</p>\r\n<p class='showHideElement' >In the ExtendedModel class</p>\r\n<p class='showHideElement' >Candidate.cs :</p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class User {\r\n        public bool CandidateNameConditionalExpression(object parentEntity = null) {\r\n            var t = this;\r\n            return false;\r\n        }\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >And in the DbEntities class</p>\r\n<div class='model-ts'><pre><code>\r\n  [Required(conditionalExpressionName:nameof(User.EmailConditionalExpression))]\r\n  public string CandidateName { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicconfigexpressionname'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>DynamicConfigExpressionName</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want to set validation property of validation at runtime(on the fly) validation, <span class='highlighted'>DynamicConfigExpressionName</span> is set in which the custom function of dynamicExpressionName is passed.</p>\r\n<p class='showHideElement' >In the ExtendedModel class</p>\r\n<div class='model-ts'><pre><code>\r\n    public partial class User {\r\n        public Dictionary&ltstring, object&gt CandidateNameDynamicExpression(object parentEntity = null) {\r\n            return new Dictionary&ltstring, object&gt()\r\n            {\r\n                { \"CustomMessageKey\",\"CustomRequiredKey\" }\r\n            };\r\n        }\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >In the DbEntities class</p>\r\n<div class='model-ts'><pre><code>\r\n    [Required(dynamicConfigExpressionName: nameof(CandidateNameDynamicExpression))]\r\n    public string CandidateName { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>MessageKey</h2>\r\n\r\n<p class='showHideElement' >Type : string</p>\r\n<p class='showHideElement' >When you want to show a custom validation message based upon the entity. MessageKey property is used. Its value is stored in the database in the form of <span class='highlighted'>LanguageContentKey</span> in LanguageContentKeys table and it's EN value is stored in LanguageContents table</p>\r\n<strong>LanguageContentKeys Table</strong>\r\n<table class=\"table table-bordered\">\r\n<tr><th>LanguageContentKeyId</th><th>KeyName</th><th>IsComponent</th></tr>\r\n<tr><td>1</td><td>RequiredMessageKey</td><td>0</td>\r\n</table>\r\n<strong>LanguageContents Table</strong>\r\n<table class=\"table table-bordered\">\r\n<tr><th>LanguageContentId</th><th>LanguageContentKeyId</th><th>ContentType</th><th>En</th><th>Fr</th></tr>\r\n<tr><td>1</td><td>1</td><td>g</td><td>This candidate data is required</td><td>NULL</td></tr>\r\n</table>\r\n<p class='showHideElement' >In the DbEntity class : </p>\r\n<div class='model-ts'><pre><code>\r\n    [Required(messageKey:\"RequiredMessageKey\")]\r\n     public string CandidateName { get; set; }\r\n</code></pre></div>\r\n</div></div>\r\n"}