{"rightSidebarLinks":[{"id":"stored-procedures","title":"Stored Procedures","subLink":null},{"id":"storedprocedure","title":"Stored Procedure","subLink":[{"title":"1. Performing Search operation on entities having large number of records.","id":"1.performingsearchoperationonentitieshavinglargenumberofrecords.","thirdLevelLink":[]},{"title":"2. Creating search lookup for performing search in a dropdown","id":"2.creatingsearchlookupforperformingsearchinadropdown","thirdLevelLink":[]},{"title":"3. Managing complex operations","id":"3.managingcomplexoperations","thirdLevelLink":[]}]}],"title":"Stored Procedures","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/working-with-data-model/database-approach/stored-procedures.md","category":"working-with-data-model","subCategory":"database-approach","linkTitle":"storedprocedures","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'storedprocedure'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Stored Procedure</h1>\r\n\r\n<p class='showHideElement' >Stored procedures are prefered to used when large number of data is involved. It leads to high performance, reusability of code and easy maintanability. It takes input parameters for execution and based upon that it provides the output which should be as per the required resulset. It stores the programming statements for a specific task to be performed and needs to be compiled only once. </p>\r\n</div></div>\r\n<div class='row page-section' id= '1.performingsearchoperationonentitieshavinglargenumberofrecords.'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>1. Performing Search operation on entities having large number of records.</h2>\r\n\r\n<p class='showHideElement' >Suppose we have a list of employees which have records exceeds 1000 records and the user wants to search employees. A Stored procedure will be made named <span class='highlighted'>spSearchEmployees</span> which will be used to fetch the record list to be shown on the user interface.  </p>\r\n<p class='showHideElement' >Example :</p>\r\n<div class='model-ts'><pre><code>\r\nCREATE PROCEDURE [dbo].[spSearchEmployees]\r\n\t@Query VARCHAR(MAX)\r\nAS\r\nBEGIN\r\n select  CAST(RAND() * 1000 + 1 AS INT) as Id,\r\n (Select EmployeeId ,EmployeeName from Employees  where EmployeeName like @Query+'%' FOR JSON PATH) as Result\r\nEND\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= '2.creatingsearchlookupforperformingsearchinadropdown'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>2. Creating search lookup for performing search in a dropdown</h2>\r\n\r\n<p class='showHideElement' >For performing search in the dropdown, we will make <span class='highlighted'>spEmployeeLookups</span> which will search employee's information based upon the parameter passed. in this case <span class='highlighted'>EmployeeName</span> is passed.   </p>\r\n<p class='showHideElement' >Example :</p>\r\n<div class='model-ts'><pre><code>\r\nCREATE PROCEDURE [dbo].[spEmployeeLookups]\r\n\t@EmployeeName nVARCHAR(50)\r\nAS\r\nBEGIN\r\n\tselect  CAST(RAND() * 1000 + 1 AS INT) as Id,\r\n\t(Select EmployeeId, EmployeeName from Employees where EmployeeName like @EmployeeName+'%') as Result\r\nEND\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= '3.managingcomplexoperations'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>3. Managing complex operations</h2>\r\n\r\n<p class='showHideElement' >When there are scenarios where the operation to be performed using more than one entity and it is not been covered using the UnitOfWork method. A stored procedure is executed using <span class='highlighted'>DbContextManager</span> the transaction is being opened and the changes are commited. For more information about it refer <span class='highlighted'>DbContextManager</span>.</p>\r\n<p class='showHideElement' >Example :</p>\r\n<div class='model-ts'><pre><code>\r\nCREATE TYPE dbo.CandidateAvailabilitiesArray \r\nAS TABLE\r\n(\r\n  AvailableDate datetimeoffset(7),\r\n  FromTime time(7),\r\n  ToTime time(7),\r\n  CandidateId int\r\n);\r\nGo\r\nCREATE PROC spInsertcandidateAvailabilities\r\n@CandidateAvailabilityArray AS dbo.CandidateAvailabilitiesArray READONLY\r\nAS\r\nBEGIN\r\n    INSERT INTO CandidateAvailabilities SELECT * FROM @CandidateAvailabilityArray \r\nEND\r\n</code></pre></div>\r\n</div></div>\r\n"}