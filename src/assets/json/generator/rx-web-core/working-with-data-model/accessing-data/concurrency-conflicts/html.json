{"rightSidebarLinks":[{"id":"concurrency-conflicts","title":"Concurrency Conflicts","subLink":null},{"id":"concurrencyconflicts","title":"Concurrency Conflicts","subLink":[{"title":"Concurrency Control","id":"concurrencycontrol","thirdLevelLink":[]}]}],"title":"Concurrency Conflicts","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/working-with-data-model/accessing-data/concurrency-conflicts.md","category":"working-with-data-model","subCategory":"concurrency-conflicts","linkTitle":"concurrency-conflicts","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'concurrencyconflicts'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Concurrency Conflicts</h1>\r\n\r\n<p class='showHideElement' >In an application having large number of users and domains there arises a possibility of database concurrency. Database concurrency refers to a condition in which multiple users or processes are trying to access same data in the database</p>\r\n<p class='showHideElement' >In such cases, it becomes very important to maintain data consistency through concurrency control. Let's see how it is achieved using the Uow methods of RxWebCore.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'concurrencycontrol'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Concurrency Control</h2>\r\n\r\n<p class='showHideElement' >Types of concurrency ....</p>\r\n<p class='showHideElement' >Concurrency control in data models is managed using <span class='highlighted'>IConcurrencyException</span> interface. </p>\r\n</div></div>\r\n"}