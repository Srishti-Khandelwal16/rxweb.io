{"rightSidebarLinks":[{"id":"domain-controller","title":"DomainController","subLink":null},{"id":"domaincontroller","title":"Domain Controller","subLink":[{"title":"Generate a Domain Controller","id":"generateadomaincontroller","thirdLevelLink":[]},{"title":"Methods","id":"methods","thirdLevelLink":[]},{"title":"Example","id":"example","thirdLevelLink":[]}]}],"title":"DomainController","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/developing-the-api/domain-controller.md","category":"rxwebcore","subCategory":"developing-the-api","linkTitle":"domain-controller","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'domaincontroller'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Domain Controller</h1>\r\n\r\n<p class='showHideElement' >Some entities may involve complex logic while implementation of the methods in the API, When there is a lot of custom business logic required while executing the data objects a <span class='highlighted'>DomainController</span> is made. When a domain controller is made it indicates that the complexity of the controller is high and it generates a seperate domain class where the logic is written and  it is refered in the controller class.</p>\r\n<p class='showHideElement' >The controller must be inherited from the class <span class='highlighted'>BaseDomainController</span> in which the entity name is passed as a parameter. The controller will have a predefined route which include the controller name. For example: <span class='highlighted'>[Route(\"api/Users\")]</span> </p>\r\n<p class='showHideElement' >Users Entity requires a custom logic to be added into it. For example it is having complex data entity implementation   </p>\r\n<blockquote class='showHideElement' ><p>Name of that basic controller must have a suffix \"Controller\". For example: <span class='highlighted'>UsersController</span>.</p></blockquote>\r\n<a role=\"button\" target=\"_blank\" class=\"git-link-button\" href=\"https://github.com/rxweb/RxWebCore/blob/master/src/Samples/AspNetCore/Documentation%20Examples/HumanResourceApplication/HumanResourceApplication.Api/Controllers/Api/UserModule/UsersController.cs\"><span style=\"vertical-align: middle\">Download the Code</span><img class=\"_3-99 img\" src=\"https://scontent.famd5-1.fna.fbcdn.net/v/t39.2365-6/21630666_872184906282544_8997395837269049344_n.png?_nc_cat=106&amp;_nc_ohc=ixvAzbNREvgAX9AAb7C&amp;_nc_ht=scontent.famd5-1.fna&amp;oh=738ee91e1ae8331712186222788828a0&amp;oe=5ED55A8A\" height=\"25\" alt=\"\" style=\"vertical-align:middle;margin-left: 4px;max-width: 654px;\"></a>\r\n</div></div>\r\n<div class='row page-section' id= 'generateadomaincontroller'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Generate a Domain Controller</h2>\r\n\r\n<p class='showHideElement' >To create a domain controller, open the <span class='highlighted'>Package Manager Console</span> and run the following command.</p>\r\n<blockquote class='showHideElement' ><p>rxwebcore --controller --domain --main &ltController_Name&gt --uow &ltModule_Name&gt</p></blockquote>\r\n<p class='showHideElement' >Lets consider a scenario where you want to create a <span class='highlighted'>UsersController</span> with high complexity true in the <span class='highlighted'>UsersModule</span>, you have to write:</p>\r\n<blockquote class='showHideElement' ><p>rxwebcore --controller --domain --main Users --uow User</p></blockquote>\r\n<p class='showHideElement' >In the above command by writing --domain indicates its complexity high, Users is the controller name and User is the Module name. It will create a controller <span class='highlighted'>UsersController</span> in <span class='highlighted'>UsersModule</span> in Api folder of the project and <span class='highlighted'>UsersDomain.cs</span> in the Domain folder of the project.</p>\r\n<p class='showHideElement' >In this controller, the password and salt fields value are inserted using the <span class='highlighted'>Encrypt</span> method of <span class='highlighted'>IPasswordHash</span>. The below domain file contains the business logic of inserting and updating a user having password and salt in encrypted form in the database. </p>\r\n</div></div>\r\n<div class='row page-section' id= 'methods'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Methods</h2>\r\n\r\n<table class=\"table table-bordered\">\r\n<tr><th>Method</th><th>Description</th><th>Return Type</th><th>Request Params</th><th>Request Body</th><th>Response</th></tr>\r\n<tr><td>GetAsync</td><td>Get all the objects of the entity</td><td>object</td><td> - </td><td> - </td><td>complete list of that entity</td></tr>\r\n<tr><td>GetById</td><td>Get Object By Id</td><td>Entity_Name</td><td>Id of that entity which you want to get</td><td> - </td><td>Single entity based on the id</td></tr>\r\n<tr><td>AddValidation</td><td>Adds validation for the particular entity</td><td>string</td><td>entity object</td><td> - </td><td>Added Validation</td></tr>\r\n<tr><td>UpdateValidation</td><td>Updates validation for the particular entity</td><td>string</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>AddAsync</td><td>Adding objects of the particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>UpdateAsync</td><td>Updating objects of the particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>DeleteValidation</td><td>Deletes validations for the particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>DeleteAsync</td><td>deletes a particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'example'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Example</h2>\r\n\r\n<div class='model-ts'><pre><code>\r\n    [ApiController]\r\n    [Route(\"api/[controller]\")]\r\n\tpublic class UsersController : BaseDomainController&ltUser&gt\r\n    {\r\n        public UsersController(IUserDomain domain):base(domain) {}\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >The refered <span class='highlighted'>IUserDomain</span> interface will be created  in  <span class='highlighted'>UsersDomain.cs</span> in the Domain folder of the project where the business logic code will use methods of <span class='highlighted'>Uow</span>.</p>\r\n<blockquote class='showHideElement' ><p>Type conversion of the password field will be managed by created a partial class of the user having a userPassword field of string data type having <span class='highlighted'>[NotMapped]</span> annotation as below</p></blockquote>\r\n<div class='model-ts'><pre><code>\r\n public partial class User\r\n    {        \r\n        [NotMapped]\r\n        public string UserPassword { get; set; }\r\n    }\r\n</code></pre></div>\r\n<div class='model-ts'><pre><code>\r\n    public class UserDomain : IUserDomain\r\n    {\r\n        private IPasswordHash PasswordHash { get; set; }\r\n        public UserDomain(ILoginUow uow,IPasswordHash passwordHash) {\r\n            this.Uow = uow;\r\n            this.passwordHash = passwordHash;\r\n        }\r\n        public Task<object> GetAsync(User user)\r\n        {\r\n           var userList=(object) Uow.Repository<User>().AllInclude(p => p.UserRoles);\r\n            return Task.FromResult(userList);\r\n        }\r\n        public Task<object> GetBy(User parameters)\r\n        {\r\n            var userList = (object)this.Uow.Repository<User>().SingleOrDefault(m => m.UserId == parameters.UserId);\r\n            return Task.FromResult(userList);\r\n        }\r\n        public HashSet<string> AddValidation(User entity)\r\n        {\r\n            return ValidationMessages;\r\n        }\r\n        public async Task AddAsync(User entity)\r\n        {\r\n            PasswordResult result = passwordHash.Encrypt(entity.UserPassword);\r\n            entity.Password = result.Signature;\r\n            entity.Salt = result.Salt;\r\n            await Uow.RegisterNewAsync(entity);\r\n            await Uow.CommitAsync();\r\n        }\r\n        public HashSet<string> UpdateValidation(User entity)\r\n        {\r\n            return ValidationMessages;\r\n        }\r\n        public async Task UpdateAsync(User entity)\r\n        {\r\n            PasswordResult result = passwordHash.Encrypt(entity.UserPassword);\r\n            entity.Password = result.Signature;\r\n            entity.Salt = result.Salt;\r\n            await Uow.RegisterDirtyAsync(entity);\r\n            await Uow.CommitAsync();\r\n        }\r\n        public HashSet<string> DeleteValidation( User parameters)\r\n        {\r\n            return ValidationMessages;\r\n        }\r\n        public Task DeleteAsync(User parameters)\r\n        {\r\n           User user= Uow.Repository<User>().FirstOrDefault(p => p.UserId == parameters.UserId);\r\n             Uow.RegisterDeletedAsync(user);\r\n          return  Uow.CommitAsync();\r\n        }\r\n        public ILoginUow Uow { get; set; }\r\n        private HashSet<string> ValidationMessages { get; set; } = new HashSet<string>();\r\n    }\r\n    public interface IUserDomain : ICoreDomain<User,User> { }   \r\n</code></pre></div>\r\n</div></div>\r\n"}