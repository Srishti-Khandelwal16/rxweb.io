{"rightSidebarLinks":[{"id":"owasp-standards","title":"OWASP Top Standards","subLink":null},{"id":"owaspstandards","title":"OWASP Standards","subLink":[{"title":"Open Redirect Attacks","id":"openredirectattacks","thirdLevelLink":[]},{"title":"Cross Site Scripting Attack","id":"crosssitescriptingattack","thirdLevelLink":[]},{"title":"Enable Cross-Origin Requests","id":"enablecross-originrequests","thirdLevelLink":[]}]},{"id":"injection:","title":"Injection:","subLink":[{"title":"Broken Authentication:","id":"brokenauthentication:","thirdLevelLink":[]},{"title":"Sensitive Data Exposure","id":"sensitivedataexposure","thirdLevelLink":[]},{"title":"Broken access control","id":"brokenaccesscontrol","thirdLevelLink":[]},{"title":"Security Misconfiguration","id":"securitymisconfiguration","thirdLevelLink":[]},{"title":"Using components with known vulnerablities","id":"usingcomponentswithknownvulnerablities","thirdLevelLink":[]}]}],"title":"OWASP Top Standards","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/security/owasp-standards.md","category":"rxwebcore","subCategory":"","linkTitle":"owasp-standards","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'owaspstandards'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>OWASP Standards</h1>\r\n\r\n<p class='showHideElement' >Security measures right from the initial stage of developement are much necessary in web development for maintaining a level of confidentiality and preventing the resources and corporate data from attacks like XSS(Cross-site scripting) and SQl injection, providing better access control using authentication and authorization in the application for identifying the user and give access accordingly.</p>\r\n<p class='showHideElement' >rxwebcore follows top OWASP security standards. <a class=\"redirect-link\" href=\"https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html\">OWASP</a>(Open Web Application Security Project) is an organization with focuses on software security.</p>\r\n<p class='showHideElement' >According to it, there are application security verification standards which provide a basis of testing web application technical security controls and also provides list of requirements for secure development. Some of them are listed below:</p>\r\n</div></div>\r\n<div class='row page-section' id= 'openredirectattacks'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Open Redirect Attacks</h2>\r\n\r\n<p class='showHideElement' >Preventing open redirect attacks leads to prevention from redirection to a external/malicious URL whenever the application redirects the user based upon the contents of the url. It is done by allowing only those redirections which are done locally within the application and they must be applied to a known querystring or url only. </p>\r\n</div></div>\r\n<div class='row page-section' id= 'crosssitescriptingattack'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Cross Site Scripting Attack</h2>\r\n\r\n<p class='showHideElement' >Preventing this leads to preventing the application from client side scripts which can steal cookies and session tokens, change the contents of the web etc.. It is done by various steps which include</p>\r\n<p class='showHideElement' >1. HTML encoding using razor</p>\r\n<p class='showHideElement' >2. Javascript encoding using razor</p>\r\n<p class='showHideElement' >3. Accessing encoders in the code</p>\r\n<p class='showHideElement' >4. Encoding URL Parameters</p>\r\n<p class='showHideElement' >5. Validation as an XSS prevention technique</p>\r\n</div></div>\r\n<div class='row page-section' id= 'enablecrossoriginrequests'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Enable Cross-Origin Requests</h2>\r\n\r\n<p class='showHideElement' >This principle works on not allowing to access the web APIs from any origin. It prevents the malicious site from reading confidential data from another site. The allowed hosts are to be configured in the <span class='highlighted'>appsettings.json</span></p>\r\n<div class='model-ts'><pre><code>\r\n \"AllowedHosts\": [ \"http://localhost:4200\" ]\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'injection'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Injection:</h1>\r\n\r\n<p class='showHideElement' >1) SQL Injection:</p>\r\n<p class='showHideElement' >It is done by using parameterized query while using Entity framework where a direct sql query must be used. </p>\r\n<p class='showHideElement' >2) OS Injection: </p>\r\n<p class='showHideElement' >Operation system injection is prevented using <span class='highlighted'>System.Diagnostics.Process</span> to start process and using whitelist validation.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'brokenauthentication'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Broken Authentication:</h2>\r\n\r\n<p class='showHideElement' >It is prevented by using secure password hashes having salt key and setting cookie policy.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'sensitivedataexposure'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Sensitive Data Exposure</h2>\r\n\r\n<p class='showHideElement' >It prefers using store hash to store password, allow SSL and ensure http headers doesn't disclose any information.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'brokenaccesscontrol'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Broken access control</h2>\r\n\r\n<p class='showHideElement' >1) Weak account management</p>\r\n<p class='showHideElement' >Ensure that cookies are sent via HTTPs, reduce session timeOut, protect logIn, Registration methods from bruteforce attack and use reCaptcha.</p>\r\n<p class='showHideElement' >2) Missing function level access control</p>\r\n<p class='showHideElement' >Implementing Authorization using access in controllers for implementation of role based authorization.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'securitymisconfiguration'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Security Misconfiguration</h2>\r\n\r\n<p class='showHideElement' >1) Debug and Stack trace</p>\r\n<p class='showHideElement' >Http redirection, debug and trace are off in production.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'usingcomponentswithknownvulnerablities'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Using components with known vulnerablities</h2>\r\n\r\n<p class='showHideElement' >Keeping the .NET framwork updated with latest patches, NuGet updates</p>\r\n</div></div>\r\n"}