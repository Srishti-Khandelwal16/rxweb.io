{"rightSidebarLinks":[{"id":"authentication","title":"Authentication","subLink":null},{"id":"authentication","title":"Authentication","subLink":[{"title":"Parameters","id":"parameters","thirdLevelLink":[]}]}],"title":"Authentication","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/security/authentication.md","category":"rxwebcore","subCategory":"","linkTitle":"authentication","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'authentication'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Authentication</h1>\r\n\r\n<p class='showHideElement' >Developing any enterprise application, authentication is the primary criteria, like we are developing RESTfull API which requires some sort of authentication mechanism. We will implement it using Token based authentication through JSON Web Token. For more information about JWT Token, Please refer this <a class=\"redirect-link\" href=\"https://tools.ietf.org/html/rfc7519\">docs</a>.</p>\r\n<p class='showHideElement' >Now a days this is very popular and more reliable. </p>\r\n<p class='showHideElement' >Basically We need to create a token and pass it to the client. Further more whenever the user request to the server with the token at that time the server parse the token and get the identity information of claimed user.</p>\r\n<p class='showHideElement' >So How this will work, here we discuss in detail:</p>\r\n<p class='showHideElement' >First of all we have use the TokenProvider class which is the part of <span class='highlighted'>Rxweb.Core.Security</span>. Basically this class provides a token as well as validating the token.</p>\r\n<p class='showHideElement' >As we are working on .NET Core api we have to resolve the service in the constructor of the <span class='highlighted'>AuthenticationController</span> as per the below code:</p>\r\n<div class='model-ts'><pre><code>\r\n        public class AuthenticationController : ControllerBase\r\n        {\r\n                private IJwtTokenProvider TokenProvider { get; set; }\r\n                public AuthenticationController(IJwtTokenProvider tokenProvider)\r\n                {\r\n                TokenProvider = tokenProvider;        \r\n                }\r\n        }\r\n</code></pre></div>\r\n<p class='showHideElement' >Generally we are generating a token while loging the application, The same we are following here. The token is generated from the <span class='highlighted'>GetTokenAsync</span> method of <span class='highlighted'>ApplicationTokenProvider.cs</span> which is located in the security folder of <span class='highlighted'>HumanResourceApplication.Infrastructure</span>.<span class='highlighted'></p>\r\n<div class='model-ts'><pre><code>\r\n        public async Task&ltIActionResult&gt Get()\r\n        {\r\n            var token = await ApplicationTokenProvider.GetTokenAsync(new vUser { UserId = 0, ApplicationTimeZoneName = string.Empty, LanguageCode = string.Empty });\r\n            return Ok(token);\r\n        }\r\n</code></pre></div>\r\n<p class='showHideElement' >As per the above code the </span>WriteToken<span class='highlighted'> method will be used by resolving the service in the constructor, which will create a json web token having security key and jsonWebToken which will be used in authorization bearer while making HTTP requests. </p>\r\n</div></div>\r\n<div class='row page-section' id= 'parameters'>\r\n<div class='col-lg-12'>\r\n<h2 class=title-level-2>Parameters</h2>\r\n\r\n<p class='showHideElement' >1)claims :</p>\r\n<p class='showHideElement' >The token will be generated based upon the proived <a class=\"redirect-link\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimtypes?view=netframework-4.8\">ClaimTypes</a>, As a standard practice we store user related information in the respective claim types</p>\r\n<p class='showHideElement' >2)Issuer :</p>\r\n<p class='showHideElement' >The domain through which the API is accessed or issued.  It is set to \"Web\" in the example</p>\r\n<p class='showHideElement' >3)audience :</p>\r\n<p class='showHideElement' >The <span class='highlighted'>audience</span> is the type of the user through which the token is generated. It is set to \"User\" in the example</p>\r\n<p class='showHideElement' >4)Expires :</p>\r\n<p class='showHideElement' >Set the expiration time of the token. In the above example we have set for 2 days. </p>\r\n</div></div>\r\n"}