{"rightSidebarLinks":[{"id":"compose","title":"compose (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basiccomposevalidation","title":"Basic Compose Validation","subLink":[]},{"id":"composeconfig","title":"ComposeConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"validators","id":"validators","thirdLevelLink":[]}]},{"id":"completecomposeexample","title":"Complete Compose Example","subLink":[]},{"id":"githubissues","title":"compose Github Issues","subLink":null}],"title":"compose","description":"Compose validation validators is used to apply multiple validations on a particular formControl.","validatorType":"validators","validationTypeTitle":"Validators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/compose.md","category":"form-validations","subCategory":"Custom","linkTitle":"compose","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-compose-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>compose</p></div> <div class=\"title-bar\"><p>compose validation validator is used to apply multiple validations on a particular formControl.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n  <data-scope scope=\"['decorator','validator']\">\r\n<p class='showHideElement' >Suppose you want to create UserInfo form, which contains fields like firstName, lastName, age, cityName, countryName and apply multiple validations on these fields. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n    <li>Apply compose validation on firstName field.</li>\r\n    <li>Apply compose validation on lastName field using message key.</li>\r\n    <li>Apply compose validation on age field based on matched condition in the form, like if the firstName is 'Bharat', then only the age must be validated (Based on function).</li>\r\n    <li>Apply compose validation based on matched condition in the form, like if the firstName is   'Bharat', then only the cityName must be validated ( Based on string datatype).</li>\r\n     <li>Apply compose validation on countryName field.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n    <li>Apply compose validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how compose validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basiccomposevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic Compose Validation<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#basiccomposevalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"compose-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"compose-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'composeconfig'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >ComposeConfig<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#composeconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.compose()</span> validator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a  (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Compose validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</td></tr>\r\n<tr><td><a  (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey option of compose validation is used to set the key based validation message.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#validators\")' title=\"validators\">validators</a></td><td>It is an array of rxwebValidators. Validators are set according to the relative requirement based on which validation you want to apply. Here you have to specify the name of validator which you want to use.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >Compose validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</p>\r\n<blockquote class='showHideElement' ><p>This won't work if you return without expression or fixed boolean value true or false; like : <span class='highlighted'>conditionalExpression: (x) =x.toggle</span></p></blockquote>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"compose-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"compose-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-conditionalExpression\" title=\"compose validator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"compose-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-message\" title=\"compose validator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey option of compose validation is used to set the key based validation message.</p>\r\n<div component=\"app-code\" key=\"compose-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-messageKey\" title=\"Compose validator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validators'>\r\n<div class='col-lg-12'>\r\n<h2>validators<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#validators'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>ValidatorFn[]</span></p>\r\n<p class='showHideElement' >It is an array of rxwebValidators. Validators are set according to the relative requirement based on which validation you want to apply. Here you have to specify the name of validator which you want to use.</p>\r\n<div component=\"app-code\" key=\"compose-validatorsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-validators\" title=\"Compose validator with validators\" key=\"validators\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completecomposeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete Compose Example<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#completecomposeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete Compose example which includes all the ComposeConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4 and 5.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/tabs/compose/validators#githubissues' fragment='githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}