{"rightSidebarLinks":[{"id":"allof","title":"allOf (Decorator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicallofvalidation","title":"Basic allOf Validation","subLink":[]},{"id":"arrayconfig","title":"ArrayConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"matchValues","id":"matchvalues","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completeallofexample","title":"Complete allOf Example","subLink":[]},{"id":"dynamicallofexample","title":"Dynamic allOf Example","subLink":[]},{"id":"githubissues","title":"allOf Github Issues","subLink":null}],"title":"allOf","description":"allOf validation decorators will check whether the user has entered all of the values of given field or not.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/allOf.md","category":"form-validations","subCategory":"Array","linkTitle":"allOf","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-allOf-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-allOf-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"allOf-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>allOf</p></div> <div class=\"title-bar\"><p>allOf validation decorator will check whether the user has entered all of the values of given field or not.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create an employee form which contain fields like department, projectDomains, qualifications, skills and hobbies. You want the user to enter all values of a particular field. Here the field is taken in the form of array and according to that the choice is applied on the property by providing matchValues. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n    <li>Apply allOf validation on the <span class='highlighted'>projectDomains</span> field in which you want the user to select all the project domain mentioned in the matchValues.</li>\r\n    <li>Apply allOf validation based on matched condition in the form, like if the department  is ‘dotnet’ then the <span class='highlighted'>qualifications</span> field should be validated (Based on function).</li>\r\n    <li>Apply allOf validation based on matched condition in the form, like if the department  is ‘dotnet’ then the <span class='highlighted'>skills</span> field should be validated (Based on string datatype).</li>\r\n    <li>Shows the custom validation message on <span class='highlighted'>hobbies</span> field.</li>\r\n    <li>Shows the custom message on <span class='highlighted'>languages</span> field by using <span class='highlighted'>messageKey</span> property.</li> \r\n    <data-scope scope=\"['decorator','validator']\">\r\n        <li>Apply allOf validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Let’s see how allOf decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicallofvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic allOf Validation<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#basicallofvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create an Employee Model and define a property of projectDomains in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"allOf-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operation.</p>\r\n<div component=\"app-code\" key=\"allOf-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"allOf-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-allOf-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'arrayconfig'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >ArrayConfig<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#arrayconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@allOf()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>AllOf validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#matchValues\")' title=\"#matchValues\">matchValues</a></td><td>matchValues is the array based on which the value is matched for validation. According to it, all the values in the array should be matched</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span>  </p>\r\n<p class='showHideElement' >AllOf validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</p>\r\n<blockquote class='showHideElement' ><p>This won't work if you return without expression or fixed boolean value true or false; like : <span class='highlighted'>conditionalExpression: (x) =x.toggle</span></p></blockquote>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"allOf-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"allOf-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-allOf-conditionalExpression\" title=\"allOf decorator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'matchvalues'>\r\n<div class='col-lg-12'>\r\n<h2>matchValues<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#matchvalues'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>any[]</span> </p>\r\n<p class='showHideElement' >matchValues is the array based on which the value is matched for validation. According to it, all the values in the array should be matched.</p>\r\n<div component=\"app-code\" key=\"allOf-matchValuesExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-allOf-matchValues\" title=\"allOf decorator with matchValues\" key=\"matchValues\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"allOf-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-allOf-message\" title=\"allOf decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"allOf-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-allOf-messageKey\" title=\"allOf decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeallofexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete allOf Example<a title='Link to this heading' class='link-header'  href='/form-validations/allOf/decorators#completeallofexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete allOf example which includes all the ArrayConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicallofexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic allOf Example<a title='Link to this heading' class='link-header' href='/form-validations/allOf/decorators#dynamicallofexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic AllOf example is executed on the basis of json passed in the formBuilderConfiguration which comes under <span class='highlighted'>RxFormBuilder</span> of reactive-form-validators. <span class='highlighted'>conditionalExpression</span> with function would not be applied in dynamic allOf example. This example will fulfil the requirement of our last point.</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/form-validations/allOf/decorators#githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}