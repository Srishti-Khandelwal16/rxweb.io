{"rightSidebarLinks":[{"id":"file","title":"file (Decorator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicfilevalidation","title":"Basic file Validation","subLink":[]},{"id":"fileconfig","title":"fileConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"maxFiles","id":"maxfiles","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"minFiles","id":"minfiles","thirdLevelLink":[]}]},{"id":"completefileexample","title":"Complete file Example","subLink":[]},{"id":"dynamicfileexample","title":"Dynamic file Example","subLink":[]},{"id":"githubissues","title":"file Github Issues","subLink":null}],"title":"file","description":"file validation decorators allows user to validate whether how many files can be uploaded. It depends on maxFiles and minFiles.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/file.md","category":"form-validations","subCategory":"File","linkTitle":"file","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"file-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-edit-component\"></div>\r\n<p class='showHideElement' >The below default data which is coming from the server in this example of edit form which is set in the `user-info-data.json` in json format like this:</p>\r\n<div component=\"app-code\" key=\"file-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"file-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-file-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-complete-html\"></div>\r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-file-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"file-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>file</p></div> <div class=\"title-bar\"><p>file validation decorator allows user to validate whether how many files can be uploaded. It depends on maxFiles and minFiles.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a User form, which contains fields like totalImageFiles, totalDocumentFiles, minimumFiles,maximumFile,minMaxFiles and you want the user to upload files as per validation format. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n  <li>Allow file validation on field of totalImageFiles based on maxFiles.</li>\r\n  <li>Apply file validation based on minFiles on totalDocumentFiles</li>\r\n  <li>Adding Custom Message on minMaxFiles field.</li>\r\n  <li>Apply validation on maximumFile field based on matched condition in the form, like if the fileType is 'Document', then the maximumFile must be valid file count (Used as a function).</li>\r\n  <li>Apply validation on minMaxFiles field based on matched condition in the form, like if the ImageType is 'Picture', then the minMaxFiles must be a Image format (Used as a string datatype).</li>\r\n  <li>Shows the custom message on <span class='highlighted'>Excel Files</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n  <data-scope scope=\"['decorator','validator']\">\r\n    <li>Apply file validation dynamically based on server rules.</li>\r\n  </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how file decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicfilevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic file Validation<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#basicfilevalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User model and define a property of totalImageFiles and totalDocumentFiles in the model to achieve the functional need of point 1 and 2.</p>\r\n<div component=\"app-code\" key=\"file-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'fileconfig'>\r\n<div class='col-lg-12'>\r\n<h2>fileConfig<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#fileconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@file()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a title=\"conditionalExpression\">conditionalExpression</a></td><td>file validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</td></tr>\r\n<tr><td><a title=\"maxFiles\">maxFiles</a></td><td>The Maximum Number of files that can be uploaded</td></tr>\r\n<tr><td><a title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a title=\"minFiles\">minFiles</a></td><td>The Minimum Number of files that can be uploaded</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >file validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</p>\r\n<blockquote class='showHideElement' ><p>This won't work if you return without expression or fixed boolean value true or false; like : <span class='highlighted'>conditionalExpression: (x) =x.toggle</span></p></blockquote>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"file-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"file-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-conditionalExpression\" title=\"file decorator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'maxfiles'>\r\n<div class='col-lg-12'>\r\n<h2>maxFiles<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#maxfiles'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >The Maximum Number of files that can be uploaded</p>\r\n<div component=\"app-code\" key=\"file-maxFilesExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-maxFiles\" title=\"file decorator with maxFiles\" key=\"maxFiles\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"file-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-message\" title=\"file decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"file-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-messageKey\" title=\"file decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'minfiles'>\r\n<div class='col-lg-12'>\r\n<h2>minFiles<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#minfiles'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >The Minimum Number of files that can be uploaded</p>\r\n<div component=\"app-code\" key=\"file-minFilesExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-file-minFiles\" title=\"file decorator with minFiles\" key=\"minFiles\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completefileexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete file Example<a title='Link to this heading' class='link-header'  href='/form-validations/file/decorators#completefileexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete file example which includes all the fileConfig properties will fulfil the requirement of scenarios 1, 2, 3,4 and 5</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicfileexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic file Example<a title='Link to this heading' class='link-header' href='/form-validations/file/decorators#dynamicfileexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic File example is executed on the basis of json passed in the formBuilderConfiguration which comes under <span class='highlighted'>RxFormBuilder</span> of reactive-form-validators. <span class='highlighted'>conditionalExpression</span> with function would not be applied in dynamic file example. This example will fulfil the requirement of our last point.</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/form-validations/file/decorators#githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}