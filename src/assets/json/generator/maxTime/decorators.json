{"rightSidebarLinks":[{"id":"maxtime","title":"maxTime (Decorator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicmaxtimevalidation","title":"Basic maxTime Validation","subLink":[]},{"id":"maxtimeconfig","title":"MaxTimeConfig","subLink":[{"title":"allowSeconds","id":"allowseconds","thirdLevelLink":[]},{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"fieldName","id":"fieldname","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"operator","id":"operator","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completemaxtimeexample","title":"Complete maxTime Example","subLink":[]},{"id":"dynamicmaxtimeexample","title":"Dynamic maxTime Example","subLink":[]},{"id":"githubissues","title":"maxTime Github Issues","subLink":null}],"title":"maxTime","description":"maxTime validation  decorators  will allow user to enter the input time format which must be less than or equal to the maximum time mentioned in the config parameters.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/maxTime.md","category":"form-validations","subCategory":"Date and Time","linkTitle":"maxTime","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"maxTime-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-edit-component\"></div> \r\n<p class='showHideElement' >The below code is `attendance-data.json` for getting data from the server</p>\r\n<div component=\"app-code\" key=\"maxTime-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"maxTime-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-maxTime-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-maxTime-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTime-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>maxTime</p></div> <div class=\"title-bar\"><p>maxTime validation  decorator  will allow user to enter the input time format which must be less than or equal to the minimum time mentioned in the config parameters.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a AttendanceDetail form, which contains field of EntryPlace, EntryTime, TotalTimeOut,Net In Time, Total In Time and Exit Time you want the user to enter valid time format which must not exceed the maximum time. Here depending upon the requirement these scenarios may arise..</p>\r\n<ol class='showHideElement'>\r\n    <li>Allow maxTime validation in <span class='highlighted'>Closing Time</span> without seconds.</li>\r\n    <li>Allowing seconds in TotalTimeOut.</li>\r\n    <li>Apply maxTime validation based on matched condition in the form, like if the EntryPlace is ‘Main Entry Gate’ then the <span class='highlighted'>Total In Time</span> value should be in less than <span class='highlighted'>11:00</span> (Based on function).</li>\r\n    <li>Apply maxTime validation based on matched condition in the form, like if the EntryPlace is ‘Main Entry Gate’ then the EntryTime value should be in less than <span class='highlighted'>11:00</span> (Based on string datatype).</li>\r\n    <li>Adding Custom Message on <span class='highlighted'>Exit Time</span> Field.</li>\r\n    <li>Allowing either <span class='highlighted'>strictly less than</span> or <span class='highlighted'>less than equal to</span> operator on Break Hours Field based on a particular value.</li>\r\n    <li>Shows the custom message on <span class='highlighted'>Net In Time</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n        <li>Apply minTime validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Let’s see how maxTime decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicmaxtimevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic maxTime Validation<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#basicmaxtimevalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a AttendanceDetail class and define a property of <span class='highlighted'>Closing Time</span> in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"maxTime-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'maxtimeconfig'>\r\n<div class='col-lg-12'>\r\n<h2>MaxTimeConfig<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#maxtimeconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@maxTime()</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#allowseconds\")' title=\"allowseconds\">allowseconds</a></td><td>If you are allowed seconds in time format then you need to put this as true.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>maxTime validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#fieldName\")' title=\"fieldName\">fieldName</a></td><td>fieldName property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular field input.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#operator\")' title=\"operator\">operator</a></td><td>operator is used to validate time based upon less than or less than equal to a particular value, The default validation is based upon less than equal to.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td>value property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular time.</td></tr>\r\n</table >\r\n</div></div>\r\n<div class='row page-section' id= 'allowseconds'>\r\n<div class='col-lg-12'>\r\n<h2>allowSeconds<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#allowseconds'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>boolean</span> </p>\r\n<p class='showHideElement' >If you are allowed seconds in time format then you need to put this as true.</p>\r\n<div component=\"app-code\" key=\"maxTime-allowSecondsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-allowSeconds\" title=\"maxTime decorator with allowSeconds\" key=\"allowSeconds\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >maxTime validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</p>\r\n<blockquote class='showHideElement' ><p>This won't work if you return without expression or fixed boolean value true or false; like : <span class='highlighted'>conditionalExpression: (x) =x.toggle</span></p></blockquote>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"maxTime-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"maxTime-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-conditionalExpression\" title=\"maxTime decorator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'fieldname'>\r\n<div class='col-lg-12'>\r\n<h2>fieldName<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#fieldname'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >fieldName property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular field input.</p>\r\n<div component=\"app-code\" key=\"maxTime-fieldNameExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-fieldName\" title=\"maxTime decorator with fieldName\" key=\"fieldName\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"maxTime-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-message\" title=\"maxTime decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"maxTime-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-messageKey\" title=\"maxTime decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'operator'>\r\n<div class='col-lg-12'>\r\n<h2>operator<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#operator'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' ><span class='highlighted'>operator</span> is used to validate time based upon less than or less than equal to a particular value, The default validation is based upon less than equal to.</p>\r\n<div component=\"app-code\" key=\"maxTime-operatorExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-operator\" title=\"maxTime decorator with operator\" key=\"operator\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >value property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular time.</p>\r\n<div component=\"app-code\" key=\"maxTime-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTime-value\" title=\"maxTime decorator with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completemaxtimeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete maxTime Example<a title='Link to this heading' class='link-header'  href='/form-validations/maxTime/decorators#completemaxtimeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete maxTime example which includes all the MaxTimeConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4, 5 and 6.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicmaxtimeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic maxTime Example<a title='Link to this heading' class='link-header' href='/form-validations/maxTime/decorators#dynamicmaxtimeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic maxTime example is executed on the basis of json passed in the formBuilderConfiguration which comes under <span class='highlighted'>RxFormBuilder</span> of reactive-form-validators. <span class='highlighted'>conditionalExpression</span> with function would not be applied in dynamic maxtime example. This example will fulfil the requirement of our last point.</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/form-validations/maxTime/decorators#githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}